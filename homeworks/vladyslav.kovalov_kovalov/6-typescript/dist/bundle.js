class Game {
    constructor(currentKeyElement, totalScoreElement, roundScoreElement, balloonElement, progressElement) {
        this.currentKeyElement = currentKeyElement;
        this.totalScoreElement = totalScoreElement;
        this.roundScoreElement = roundScoreElement;
        this.balloonElement = balloonElement;
        this.progressElement = progressElement;
        this.paused = false;
        this.LETTERS = "abcdefghijklmnopqrstuvwxyz";
        this.INTERVAL = 2000;
        this.FINAL_SCORE = 200;
        this.currentKey = '';
        this.score = 100;
        this.timer = '';
    }
    getRandomLetterPosition(letterString) {
        const maxLength = letterString.length;
        return Math.floor(Math.random() * maxLength);
    }
    getRandomLetter(letterString) {
        const position = this.getRandomLetterPosition(letterString);
        return letterString[position];
    }
    getRandomScore(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
    }
    setRandomKey() {
        const randomLetter = this.getRandomLetter(this.LETTERS);
        this.currentKey = randomLetter.toUpperCase();
        this.currentKeyElement.textContent = this.currentKey;
    }
    setRoundScore(score, action) {
        this.roundScoreElement.textContent = `${action}${score}`;
    }
    updateTotalScore() {
        this.totalScoreElement.textContent = `${this.score.toString()}`;
    }
    increaseBalloon() {
        let width = this.balloonElement.offsetWidth;
        let height = this.balloonElement.offsetWidth;
        this.balloonElement.style.height = `${height + 5}px`;
        this.balloonElement.style.width = `${width + 5}px`;
    }
    decreaseBaloon() {
        let width = this.balloonElement.offsetWidth;
        let height = this.balloonElement.offsetWidth;
        this.balloonElement.style.height = `${height - 5}px`;
        this.balloonElement.style.width = `${width - 5}px`;
    }
    reset() {
        clearInterval(this.timer);
        this.timer = '';
        this.progressElement.style.display = 'none';
        this.progressElement.style.width = '0';
        this.paused = true;
    }
    addScore() {
        if (this.score >= this.FINAL_SCORE) {
            clearInterval(this.timer);
            console.log('You win!');
            this.totalScoreElement.textContent = 'You win!';
            this.roundScoreElement.innerHTML = '&nbsp;';
            this.reset();
        }
        if (this.score < this.FINAL_SCORE) {
            const min = 5;
            const max = 10;
            const currentScore = this.getRandomScore(min, max);
            this.score += currentScore;
            this.setRoundScore(currentScore, '+');
            this.updateTotalScore();
        }
    }
    removeScore() {
        if (this.score <= 0) {
            clearInterval(this.timer);
            console.log('You lose!');
            this.totalScoreElement.textContent = 'You lose!';
            this.roundScoreElement.innerHTML = '&nbsp;';
            this.reset();
        }
        if (this.score > 0) {
            const min = 20;
            const max = 25;
            const currentScore = this.getRandomScore(min, max);
            this.score -= currentScore;
            this.setRoundScore(currentScore, '-');
            this.updateTotalScore();
            this.decreaseBaloon();
        }
    }
    checkPressedKey(key) {
        if (key === this.currentKey) {
            clearInterval(this.timer);
            return this.addScore();
        }
        ;
        if (key !== this.currentKey) {
            clearInterval(this.timer);
            return this.removeScore();
        }
        ;
    }
    start() {
        this.setRandomKey();
    }
    setTimer() {
        let step = 10;
        let counter = 100;
        this.timer = setInterval(() => {
            console.log(this.timer);
            if (counter >= 0) {
                this.progressElement.style.width = counter + '%';
                counter -= step;
                return;
            }
            clearInterval(this.timer);
            const min = 20;
            const max = 25;
            const currentScore = this.getRandomScore(min, max);
            this.score -= currentScore;
            this.setRoundScore(currentScore, '-');
            this.updateTotalScore();
            this.decreaseBaloon();
            if (this.score > 0) {
                game.setRandomKey();
                this.setTimer();
            }
        }, this.INTERVAL / 10);
    }
}
const currentKeyElement = document.querySelector('[data-current-key]');
const totalScoreElement = document.querySelector('[data-total-score]');
const roundScoreElement = document.querySelector('[data-round-score]');
const balloonElement = document.querySelector('[data-balloon-item]');
const progressElement = document.querySelector('[data-progress]');
const game = new Game(currentKeyElement, totalScoreElement, roundScoreElement, balloonElement, progressElement);
game.start();
document.addEventListener('keydown', e => {
    const pressedKey = e.key.toUpperCase();
    if (!game.paused) {
        game.checkPressedKey(pressedKey);
        game.setRandomKey();
        game.setTimer();
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBbUIsQ0FBQztBQUN6RixNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQW1CLENBQUM7QUFDekYsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBbUIsQ0FBQztBQUN2RixNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFtQixDQUFDO0FBRXBGLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNoSCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFHYixRQUFRLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3JDLE1BQU0sVUFBVSxHQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0MsSUFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDYixJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbkI7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzYtdHlwZXNjcmlwdC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBHYW1lIHtcbiAgICBwYXVzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIExFVFRFUlM6IHN0cmluZyA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcbiAgICBwcml2YXRlIElOVEVSVkFMOiBudW1iZXIgPSAyMDAwO1xuICAgIHByaXZhdGUgRklOQUxfU0NPUkU6IG51bWJlciA9IDIwMDtcbiAgICBwcml2YXRlIGN1cnJlbnRLZXk6IHN0cmluZyA9ICcnO1xuICAgIHByaXZhdGUgc2NvcmU6IG51bWJlciA9IDEwMDtcbiAgICBwcml2YXRlIHRpbWVyOiBhbnkgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGN1cnJlbnRLZXlFbGVtZW50OiBIVE1MU3BhbkVsZW1lbnQsXG4gICAgICAgIHByaXZhdGUgdG90YWxTY29yZUVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50LFxuICAgICAgICBwcml2YXRlIHJvdW5kU2NvcmVFbGVtZW50OiBIVE1MRGl2RWxlbWVudCxcbiAgICAgICAgcHJpdmF0ZSBiYWxsb29uRWxlbWVudDogSFRNTERpdkVsZW1lbnQsXG4gICAgICAgIHByaXZhdGUgcHJvZ3Jlc3NFbGVtZW50OiBIVE1MRGl2RWxlbWVudCxcbiAgICApIHsgfVxuXG4gICAgcHJpdmF0ZSBnZXRSYW5kb21MZXR0ZXJQb3NpdGlvbihsZXR0ZXJTdHJpbmc6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IG1heExlbmd0aCA9IGxldHRlclN0cmluZy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXhMZW5ndGgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmFuZG9tTGV0dGVyKGxldHRlclN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmdldFJhbmRvbUxldHRlclBvc2l0aW9uKGxldHRlclN0cmluZyk7XG4gICAgICAgIHJldHVybiBsZXR0ZXJTdHJpbmdbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmFuZG9tU2NvcmUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTtcbiAgICB9XG5cbiAgICBzZXRSYW5kb21LZXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHJhbmRvbUxldHRlcjogc3RyaW5nID0gdGhpcy5nZXRSYW5kb21MZXR0ZXIodGhpcy5MRVRURVJTKTtcbiAgICAgICAgdGhpcy5jdXJyZW50S2V5ID0gcmFuZG9tTGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHRoaXMuY3VycmVudEtleUVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLmN1cnJlbnRLZXk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRSb3VuZFNjb3JlKHNjb3JlOiBudW1iZXIsIGFjdGlvbjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucm91bmRTY29yZUVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHthY3Rpb259JHtzY29yZX1gO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVG90YWxTY29yZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b3RhbFNjb3JlRWxlbWVudC50ZXh0Q29udGVudCA9IGAke3RoaXMuc2NvcmUudG9TdHJpbmcoKX1gO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5jcmVhc2VCYWxsb29uKCk6IHZvaWQge1xuICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHRoaXMuYmFsbG9vbkVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IHRoaXMuYmFsbG9vbkVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgdGhpcy5iYWxsb29uRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHQgKyA1fXB4YDtcbiAgICAgICAgdGhpcy5iYWxsb29uRWxlbWVudC5zdHlsZS53aWR0aCA9IGAke3dpZHRoICsgNX1weGA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWNyZWFzZUJhbG9vbigpIHtcbiAgICAgICAgbGV0IHdpZHRoOiBudW1iZXIgPSB0aGlzLmJhbGxvb25FbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0OiBudW1iZXIgPSB0aGlzLmJhbGxvb25FbGVtZW50Lm9mZnNldFdpZHRoO1xuXG4gICAgICAgIHRoaXMuYmFsbG9vbkVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0IC0gNX1weGA7XG4gICAgICAgIHRoaXMuYmFsbG9vbkVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHt3aWR0aCAtIDV9cHhgO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXQoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gICAgICAgIHRoaXMudGltZXIgPSAnJztcbiAgICAgICAgdGhpcy5wcm9ncmVzc0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy5wcm9ncmVzc0VsZW1lbnQuc3R5bGUud2lkdGggPSAnMCc7XG4gICAgICAgIHRoaXMucGF1c2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFNjb3JlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zY29yZSA+PSB0aGlzLkZJTkFMX1NDT1JFKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1lvdSB3aW4hJyk7XG4gICAgICAgICAgICB0aGlzLnRvdGFsU2NvcmVFbGVtZW50LnRleHRDb250ZW50ID0gJ1lvdSB3aW4hJztcbiAgICAgICAgICAgIHRoaXMucm91bmRTY29yZUVsZW1lbnQuaW5uZXJIVE1MID0gJyZuYnNwOyc7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zY29yZSA8IHRoaXMuRklOQUxfU0NPUkUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbjogbnVtYmVyID0gNTtcbiAgICAgICAgICAgIGNvbnN0IG1heDogbnVtYmVyID0gMTA7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTY29yZTogbnVtYmVyID0gdGhpcy5nZXRSYW5kb21TY29yZShtaW4sIG1heCk7XG4gICAgICAgICAgICB0aGlzLnNjb3JlICs9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgIHRoaXMuc2V0Um91bmRTY29yZShjdXJyZW50U2NvcmUsICcrJyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRvdGFsU2NvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlU2NvcmUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNjb3JlIDw9IDApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnWW91IGxvc2UhJyk7XG4gICAgICAgICAgICB0aGlzLnRvdGFsU2NvcmVFbGVtZW50LnRleHRDb250ZW50ID0gJ1lvdSBsb3NlISc7XG4gICAgICAgICAgICB0aGlzLnJvdW5kU2NvcmVFbGVtZW50LmlubmVySFRNTCA9ICcmbmJzcDsnO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2NvcmUgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBtaW46IG51bWJlciA9IDIwO1xuICAgICAgICAgICAgY29uc3QgbWF4OiBudW1iZXIgPSAyNTtcblxuICAgICAgICAgICAgY29uc3QgY3VycmVudFNjb3JlOiBudW1iZXIgPSB0aGlzLmdldFJhbmRvbVNjb3JlKG1pbiwgbWF4KTtcbiAgICAgICAgICAgIHRoaXMuc2NvcmUgLT0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgdGhpcy5zZXRSb3VuZFNjb3JlKGN1cnJlbnRTY29yZSwgJy0nKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG90YWxTY29yZSgpO1xuICAgICAgICAgICAgdGhpcy5kZWNyZWFzZUJhbG9vbigpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja1ByZXNzZWRLZXkoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jdXJyZW50S2V5KSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkU2NvcmUoKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ICE9PSB0aGlzLmN1cnJlbnRLZXkpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVTY29yZSgpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuc2V0UmFuZG9tS2V5KCk7XG4gICAgfVxuXG4gICAgc2V0VGltZXIoKTogdm9pZCB7XG4gICAgICAgIGxldCBzdGVwID0gMTA7XG4gICAgICAgIGxldCBjb3VudGVyID0gMTAwO1xuICAgICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy50aW1lcik7XG4gICAgICAgICAgICBpZiAoY291bnRlciA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0VsZW1lbnQuc3R5bGUud2lkdGggPSBjb3VudGVyICsgJyUnO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgLT0gc3RlcDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG5cbiAgICAgICAgICAgIGNvbnN0IG1pbjogbnVtYmVyID0gMjA7XG4gICAgICAgICAgICBjb25zdCBtYXg6IG51bWJlciA9IDI1O1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNjb3JlOiBudW1iZXIgPSB0aGlzLmdldFJhbmRvbVNjb3JlKG1pbiwgbWF4KTtcbiAgICAgICAgICAgIHRoaXMuc2NvcmUgLT0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgdGhpcy5zZXRSb3VuZFNjb3JlKGN1cnJlbnRTY29yZSwgJy0nKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG90YWxTY29yZSgpO1xuICAgICAgICAgICAgdGhpcy5kZWNyZWFzZUJhbG9vbigpXG5cbiAgICAgICAgICAgIGlmKHRoaXMuc2NvcmUgPiAwKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5zZXRSYW5kb21LZXkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuSU5URVJWQUwgLyAxMCk7XG4gICAgfVxufVxuXG5jb25zdCBjdXJyZW50S2V5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWN1cnJlbnQta2V5XScpIGFzIEhUTUxTcGFuRWxlbWVudDtcbmNvbnN0IHRvdGFsU2NvcmVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdG90YWwtc2NvcmVdJykgYXMgSFRNTERpdkVsZW1lbnQ7XG5jb25zdCByb3VuZFNjb3JlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJvdW5kLXNjb3JlXScpIGFzIEhUTUxEaXZFbGVtZW50O1xuY29uc3QgYmFsbG9vbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1iYWxsb29uLWl0ZW1dJykgYXMgSFRNTERpdkVsZW1lbnQ7XG5jb25zdCBwcm9ncmVzc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1wcm9ncmVzc10nKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuY29uc3QgZ2FtZSA9IG5ldyBHYW1lKGN1cnJlbnRLZXlFbGVtZW50LCB0b3RhbFNjb3JlRWxlbWVudCwgcm91bmRTY29yZUVsZW1lbnQsIGJhbGxvb25FbGVtZW50LCBwcm9ncmVzc0VsZW1lbnQpO1xuZ2FtZS5zdGFydCgpO1xuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICBjb25zdCBwcmVzc2VkS2V5OiBzdHJpbmcgPSBlLmtleS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmKCFnYW1lLnBhdXNlZCkge1xuICAgICAgICBnYW1lLmNoZWNrUHJlc3NlZEtleShwcmVzc2VkS2V5KTtcbiAgICAgICAgZ2FtZS5zZXRSYW5kb21LZXkoKTtcbiAgICAgICAgZ2FtZS5zZXRUaW1lcigpO1xuICAgIH1cbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
