/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

class Game {
    constructor(currentKeyElement, totalScoreElement, roundScoreElement, balloonElement, progressElement) {
        this.currentKeyElement = currentKeyElement;
        this.totalScoreElement = totalScoreElement;
        this.roundScoreElement = roundScoreElement;
        this.balloonElement = balloonElement;
        this.progressElement = progressElement;
        this.paused = true;
        this.LETTERS = "abcdefghijklmnopqrstuvwxyz";
        this.INTERVAL = 2000;
        this.FINAL_SCORE = 200;
        this.currentKey = '';
        this.score = 100;
        this.timer = '';
    }
    // private saveGameScore(data: []): string | void {
    // }
    // private getLocalStorage(): string | void {
    //     let data: any;
    //     if(localStorage.getItem('score') === null) localStorage.setItem('score', JSON.stringify([]));;
    //     if(localStorage.getItem('score')) data = JSON.parse(localStorage.getItem('score');
    //     return data;
    // }
    getRandomLetterPosition(letterString) {
        return Math.floor(Math.random() * letterString.length);
    }
    getRandomLetter(letterString) {
        return letterString[this.getRandomLetterPosition(letterString)];
    }
    getRandomScore(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
    }
    setRandomKey() {
        const randomLetter = this.getRandomLetter(this.LETTERS);
        this.currentKey = randomLetter.toUpperCase();
        this.currentKeyElement.textContent = this.currentKey;
    }
    setRoundScore(score, action) {
        this.roundScoreElement.textContent = `${action}${score}`;
    }
    updateTotalScore() {
        this.totalScoreElement.textContent = `${this.score.toString()}`;
    }
    increaseBalloon() {
        let width = this.balloonElement.offsetWidth;
        let height = this.balloonElement.offsetWidth;
        this.balloonElement.style.height = `${height + 5}px`;
        this.balloonElement.style.width = `${width + 5}px`;
    }
    decreaseBaloon() {
        let width = this.balloonElement.offsetWidth;
        let height = this.balloonElement.offsetWidth;
        this.balloonElement.style.height = `${height - 5}px`;
        this.balloonElement.style.width = `${width - 5}px`;
    }
    reset() {
        clearInterval(this.timer);
        this.timer = '';
        this.progressElement.style.width = '100%';
        this.paused = true;
    }
    checkScore() {
        if (this.score <= 0) {
            clearInterval(this.timer);
            this.reset();
            this.totalScoreElement.textContent = 'You lose!';
            this.roundScoreElement.innerHTML = '&nbsp;';
        }
        if (this.score >= 200) {
            clearInterval(this.timer);
            this.reset();
            this.totalScoreElement.textContent = 'You won!';
            this.roundScoreElement.innerHTML = '&nbsp;';
        }
    }
    addScore() {
        const min = 5;
        const max = 10;
        const currentScore = this.getRandomScore(min, max);
        this.score += currentScore;
        this.setRoundScore(currentScore, '+');
        this.updateTotalScore();
        this.increaseBalloon();
    }
    removeScore() {
        const min = 20;
        const max = 25;
        const currentScore = this.getRandomScore(min, max);
        this.score -= currentScore;
        this.setRoundScore(currentScore, '-');
        this.updateTotalScore();
        this.decreaseBaloon();
    }
    checkPressedKey(key) {
        if (key === this.currentKey) {
            clearInterval(this.timer);
            return this.addScore();
        }
        ;
        if (key !== this.currentKey) {
            clearInterval(this.timer);
            return this.removeScore();
        }
        ;
    }
    start() {
        this.setRandomKey();
    }
    setTimer() {
        let step = 10;
        let counter = 100;
        this.timer = setInterval(() => {
            if (counter >= 0) {
                this.progressElement.style.width = counter + '%';
                counter -= step;
                return;
            }
            clearInterval(this.timer);
            const min = 10;
            const max = 15;
            const currentScore = this.getRandomScore(min, max);
            this.score -= currentScore;
            this.setRoundScore(currentScore, '-');
            this.updateTotalScore();
            this.decreaseBaloon();
            if (this.score > 0) {
                game.setRandomKey();
                this.setTimer();
            }
            game.checkScore();
        }, this.INTERVAL / 10);
    }
    buttonStart() {
        console.log('Start');
        this.paused = false;
        this.start();
        this.setTimer();
    }
    buttonEnd() {
        console.log('End');
        this.paused = true;
        this.reset();
        this.currentKey = '';
        this.totalScoreElement.textContent = 'You lose!';
        this.roundScoreElement.innerHTML = '&nbsp;';
    }
    buttonRestart() {
        this.reset();
        this.roundScoreElement.innerHTML = '&nbsp;';
        this.currentKey = '';
        this.score = 100;
        this.totalScoreElement.textContent = `${this.score}`;
        this.paused = false;
    }
}
const currentKeyElement = document.querySelector('[data-current-key]');
const totalScoreElement = document.querySelector('[data-total-score]');
const roundScoreElement = document.querySelector('[data-round-score]');
const balloonElement = document.querySelector('[data-balloon-item]');
const progressElement = document.querySelector('[data-progress]');
const buttonsContainerElement = document.querySelector('[data-buttons-container]');
const game = new Game(currentKeyElement, totalScoreElement, roundScoreElement, balloonElement, progressElement);
game.start();
document.addEventListener('keydown', e => {
    game.checkScore();
    const pressedKey = e.key.toUpperCase();
    if (!game.paused) {
        game.checkPressedKey(pressedKey);
        game.setRandomKey();
        game.setTimer();
    }
});
buttonsContainerElement.addEventListener('click', event => {
    if (event.target instanceof HTMLElement && event.target.dataset.action !== '') {
        if (event.target.dataset.action === 'start')
            game.buttonStart();
        if (event.target.dataset.action === 'end')
            game.buttonEnd();
        if (event.target.dataset.action === 'restart')
            game.buttonRestart();
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,