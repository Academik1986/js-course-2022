/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

const galleryElement = document.querySelector('[data-gallery]');
const fullScreenElement = document.querySelector('[data-full-screen]');
const imageUploaderElement = document.querySelector('[data-image-upload]');
galleryElement === null || galleryElement === void 0 ? void 0 : galleryElement.addEventListener('click', event => {
    const image = event.target;
    const imageSource = image.getAttribute('src');
    if (imageSource !== null)
        toggleFullSizeImage(imageSource, fullScreenElement);
});
fullScreenElement === null || fullScreenElement === void 0 ? void 0 : fullScreenElement.addEventListener('click', event => {
    const currentImage = event.target.dataset;
    if (currentImage.fullScreenImage !== '') {
        fullScreenElement === null || fullScreenElement === void 0 ? void 0 : fullScreenElement.classList.add('hidden');
        fullScreenElement.innerHTML = '';
    }
});
function createFullSizeImage(src) {
    const template = document.querySelector('[data-full-screen-template]');
    const content = template.content.cloneNode(true);
    const element = content.querySelector('[data-full-screen-image]');
    element === null || element === void 0 ? void 0 : element.setAttribute('src', src);
    return element;
}
function toggleFullSizeImage(imageSource, container) {
    const imagePath = imageSource;
    const image = createFullSizeImage(imagePath);
    container.append(image);
    fullScreenElement === null || fullScreenElement === void 0 ? void 0 : fullScreenElement.classList.remove('hidden');
}
imageUploaderElement === null || imageUploaderElement === void 0 ? void 0 : imageUploaderElement.addEventListener('change', event => {
    const element = event.target;
    const file = element.files[0];
    getBase64(file).then(imageSrc => {
        addImage(imageSrc, galleryElement);
    });
});
function getBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    });
}
function addImage(imageSrc, container) {
    const template = document.querySelector('[data-new-image-template]');
    const content = template.content.cloneNode(true);
    const element = content.querySelector('[data-new-image-template-element]');
    element === null || element === void 0 ? void 0 : element.setAttribute('src', imageSrc);
    element === null || element === void 0 ? void 0 : element.removeAttribute('data-new-image-template-element');
    container.append(element);
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFFLENBQUM7QUFDakUsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDdkUsTUFBTSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFM0UsY0FBYyxhQUFkLGNBQWMsdUJBQWQsY0FBYyxDQUFFLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtJQUM5QyxNQUFNLEtBQUssR0FBSSxLQUFLLENBQUMsTUFBNEIsQ0FBQztJQUNsRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLElBQUcsV0FBVyxLQUFLLElBQUk7UUFBRSxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNqRixDQUFDLENBQUMsQ0FBQztBQUVILGlCQUFpQixhQUFqQixpQkFBaUIsdUJBQWpCLGlCQUFpQixDQUFFLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtJQUNqRCxNQUFNLFlBQVksR0FBSSxLQUFLLENBQUMsTUFBNEIsQ0FBQyxPQUFPLENBQUM7SUFDakUsSUFBRyxZQUFZLENBQUMsZUFBZSxLQUFLLEVBQUUsRUFBRTtRQUNwQyxpQkFBaUIsYUFBakIsaUJBQWlCLHVCQUFqQixpQkFBaUIsQ0FBRSxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLGlCQUFpQixDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7S0FDcEM7QUFDTCxDQUFDLENBQUM7QUFFRixTQUFTLG1CQUFtQixDQUFDLEdBQVE7SUFDakMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBd0IsQ0FBQztJQUM5RixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxNQUFNLE9BQU8sR0FBSSxPQUE0QixDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3hGLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFdBQWdCLEVBQUUsU0FBYztJQUN6RCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDOUIsTUFBTSxLQUFLLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixpQkFBaUIsYUFBakIsaUJBQWlCLHVCQUFqQixpQkFBaUIsQ0FBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRCxvQkFBb0IsYUFBcEIsb0JBQW9CLHVCQUFwQixvQkFBb0IsQ0FBRSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUU7SUFDckQsTUFBTSxPQUFPLEdBQUksS0FBSyxDQUFDLE1BQTJCLENBQUM7SUFDbkQsTUFBTSxJQUFJLEdBQUksT0FBTyxDQUFDLEtBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFNUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM1QixRQUFRLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRUYsU0FBUyxTQUFTLENBQUMsSUFBUztJQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDaEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxRQUFhLEVBQUUsU0FBYztJQUMzQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUF3QixDQUFDO0lBQzVGLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELE1BQU0sT0FBTyxHQUFJLE9BQTRCLENBQUMsYUFBYSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDakcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkMsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLGVBQWUsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0lBQzVELFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzYtdHlwZXNjcmlwdC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWdhbGxlcnldJykhO1xuY29uc3QgZnVsbFNjcmVlbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1mdWxsLXNjcmVlbl0nKTtcbmNvbnN0IGltYWdlVXBsb2FkZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtaW1hZ2UtdXBsb2FkXScpO1xuXG5nYWxsZXJ5RWxlbWVudD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxCdXR0b25FbGVtZW50KTtcbiAgICBjb25zdCBpbWFnZVNvdXJjZSA9IGltYWdlLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgaWYoaW1hZ2VTb3VyY2UgIT09IG51bGwpIHRvZ2dsZUZ1bGxTaXplSW1hZ2UoaW1hZ2VTb3VyY2UsIGZ1bGxTY3JlZW5FbGVtZW50KTtcbn0pO1xuXG5mdWxsU2NyZWVuRWxlbWVudD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgY29uc3QgY3VycmVudEltYWdlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MQnV0dG9uRWxlbWVudCkuZGF0YXNldDtcbiAgICBpZihjdXJyZW50SW1hZ2UuZnVsbFNjcmVlbkltYWdlICE9PSAnJykge1xuICAgICAgICBmdWxsU2NyZWVuRWxlbWVudD8uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIGZ1bGxTY3JlZW5FbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bGxTaXplSW1hZ2Uoc3JjOiBhbnkpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWZ1bGwtc2NyZWVuLXRlbXBsYXRlXScpIGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XG4gICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSAoY29udGVudCBhcyBIVE1MSW1hZ2VFbGVtZW50KS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1mdWxsLXNjcmVlbi1pbWFnZV0nKTtcbiAgICBlbGVtZW50Py5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUZ1bGxTaXplSW1hZ2UoaW1hZ2VTb3VyY2U6IGFueSwgY29udGFpbmVyOiBhbnkpIHtcbiAgICBjb25zdCBpbWFnZVBhdGggPSBpbWFnZVNvdXJjZTtcbiAgICBjb25zdCBpbWFnZSA9IGNyZWF0ZUZ1bGxTaXplSW1hZ2UoaW1hZ2VQYXRoKTtcbiAgICBjb250YWluZXIuYXBwZW5kKGltYWdlKTtcbiAgICBmdWxsU2NyZWVuRWxlbWVudD8uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG59XG5cbmltYWdlVXBsb2FkZXJFbGVtZW50Py5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldmVudCA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCk7XG4gICAgY29uc3QgZmlsZSA9IChlbGVtZW50LmZpbGVzIGFzIEZpbGVMaXN0KVswXTtcblxuICAgIGdldEJhc2U2NChmaWxlKS50aGVuKGltYWdlU3JjID0+IHtcbiAgICAgICAgYWRkSW1hZ2UoaW1hZ2VTcmMsIGdhbGxlcnlFbGVtZW50KTtcbiAgICB9KTtcbn0pXG5cbmZ1bmN0aW9uIGdldEJhc2U2NChmaWxlOiBhbnkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG4gICAgICByZWFkZXIub25lcnJvciA9IGVycm9yID0+IHJlamVjdChlcnJvcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEltYWdlKGltYWdlU3JjOiBhbnksIGNvbnRhaW5lcjogYW55KSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZXctaW1hZ2UtdGVtcGxhdGVdJykgYXMgSFRNTFRlbXBsYXRlRWxlbWVudDtcbiAgICBjb25zdCBjb250ZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgZWxlbWVudCA9IChjb250ZW50IGFzIEhUTUxJbWFnZUVsZW1lbnQpLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5ldy1pbWFnZS10ZW1wbGF0ZS1lbGVtZW50XScpO1xuICAgIGVsZW1lbnQ/LnNldEF0dHJpYnV0ZSgnc3JjJywgaW1hZ2VTcmMpO1xuICAgIGVsZW1lbnQ/LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1uZXctaW1hZ2UtdGVtcGxhdGUtZWxlbWVudCcpO1xuICAgIGNvbnRhaW5lci5hcHBlbmQoZWxlbWVudCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=